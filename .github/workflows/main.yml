name: Run CI
on:
  workflow_dispatch:
  push:
    branches:
      - main


jobs:
  security-and-quality:
    runs-on: ubuntu-latest
    name: Security & Quality Checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest pytest-cov bandit safety flake8 black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Code formatting check (Black)
        run: |
          black --check --diff .
        continue-on-error: true

      - name: Import sorting check (isort)
        run: |
          isort --check-only --diff .
        continue-on-error: true

      - name: Code linting (Flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Security vulnerability scan (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt
        continue-on-error: true

      - name: Dependency vulnerability check (Safety)
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true

      - name: Run unit tests
        run: |
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
          else
            echo "No tests directory found, skipping unit tests"
          fi
        continue-on-error: true

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'jira-app'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nvdApiKey ${{ secrets.NVD_API_KEY }}

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-reports
          path: reports/
          retention-days: 30

  sast-codeql:
    runs-on: ubuntu-latest
    name: SAST - CodeQL Analysis
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  run-jira-app:
    runs-on: ubuntu-latest
    needs: [security-and-quality, dependency-check]
    if: success()
    
    env:
      JIRA_BASE_URL: ${{ secrets.JIRA_URL }}
      JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run app.py
        working-directory: .
        run: python main.py